###########################################################
#
#   Description: Compile OpenWrt by GitHub Actions 
#
###########################################################


name: ufi-410

on:
 # repository_dispatch:
  workflow_dispatch:
    inputs:
      FEEDS_CONF:
        description: 'Feeds [必选]'
        default: 'feeds.conf.default.ufi'
      CONFIG_FILE:
        description: '调用的 [.config] 文件名称'
        default: 'ufi'
      DEFAULT_SOURCE:
        description: '源码:分支 [必选]'
        default: 'bigDshe/immortalwrt-ufi:master'
  #schedule:
  #- cron: 15 */8 * * *

env:
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    #runs-on: ubuntu-20.04
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id


    steps:
    - name: Checkout
      uses: actions/checkout@main


    - name: 环境变量设置
      run: |
        FEEDS_CONF=${{ github.event.inputs.FEEDS_CONF }}
        CONFIG_FILE=${{ github.event.inputs.CONFIG_FILE }}
        DEFAULT_SOURCE=${{ github.event.inputs.DEFAULT_SOURCE }}    
        export REPO_URL="https://github.com/$(echo $DEFAULT_SOURCE | cut -d \: -f 1)"
        export REPO_BRANCH=$(echo $DEFAULT_SOURCE | cut -d \: -f 2)
        [ -z $REPO_BRANCH ] && REPO_BRANCH=master
        echo "FEEDS_CONF=$FEEDS_CONF" >> $GITHUB_ENV
        echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        echo "DEFAULT_SOURCE=$DEFAULT_SOURCE" >> $GITHUB_ENV
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV

          

    - name: 安装依赖
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/*
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL
        sudo -E apt-get update
        #sudo -E apt-get -y install build-essential cmake asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python2.7 python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool mkisofs mkbootimg img2simg rsync zstd
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply python-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /workdir && ls
        sudo chown $USER:$GROUPS /workdir        
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean      
        sudo chown $USER:$GROUPS /workdir
        echo "Compile_Date=$(date +%Y%m%d%H%M)" > $GITHUB_WORKSPACE/Openwrt.info
        echo "Display_Date=$(date +%Y/%m/%d)" >> $GITHUB_WORKSPACE/Openwrt.info
        echo "Openwrt_Repository=$REPO_URL" >> $GITHUB_WORKSPACE/Openwrt.info
        ls && df -h

        
        
    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        ls -alh
        rm -rf /workdir/openwrt/feeds.conf.default
        cd ./openwrt
        #git pull

    - name: 更新 feeds
      run: |
        cp $FEEDS_CONF ./openwrt/feeds.conf.default
        ./openwrt/scripts/feeds update -a
        #./openwrt/scripts/feeds update -a -f
        chmod +x $DIY_P1_SH
        $GITHUB_WORKSPACE/$DIY_P1_SH

 
    - name: 安装 feeds
      run: |
        cd openwrt 
        df -h && ls
        ./scripts/feeds install -a
        #./scripts/feeds install -a -f
        free -h


    - name: 加载自定义 configuration
      run: |
        cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE ./openwrt/.config
        chmod +x $DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo -e "*********$(nproc) 线程服务器*****" && cat /proc/cpuinfo
        df -hT && ls && free -m && ls openwrt

    - name: 下载文件
      id: package
      run: |
        cd openwrt
        make defconfig
        #make download -j$(nproc)


    - name: 编译固件
      id: compile
      run: |
        cd openwrt && ls 
        make -j$(nproc)  
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d-%H.%M")" >> $GITHUB_ENV
        #编译设备名，编译完成时间

    - name: 检查磁盘空间
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
       df -hT
       cp $GITHUB_WORKSPACE/Openwrt.info ./openwrt/bin/Openwrt.info
       cd openwrt/bin/targets/*/*/ && ls
       echo "VERSION_INFO=$(cat *.manifest |grep -o "kernel -.*")" >> $GITHUB_ENV

      
      
    - name: 上传 bin
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 清除多余文件
      if: steps.compile.outputs.status == 'success' && !cancelled()
      working-directory: /workdir
      run: |
        cd openwrt/bin/targets/*/*/ && ls
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: 发布固件到 Release
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      uses: ncipollo/release-action@v1.12.0
      with:
        name: openwrt for ${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        allowUpdates: true
        replacesArtifacts: true
        tag: ${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE }}/*
        body: |
          * 这是 ${{ env.DEVICE_NAME }} 使用的 OpenWrt 固件
          * 默认 IP：192.168.5.1 默认密码：password
          * 当前使用版本:【源码( ${{ env.REPO_URL }}:${{ env.REPO_BRANCH }} )】
          * ${{ env.VERSION_INFO }}

    - name: 清除多余文件
      if: steps.compile.outputs.status == 'success' && !cancelled()
      working-directory: /workdir
      run: |
        cd openwrt
        make clean
        ./scripts/feeds clean
        rm -rf bin tmp dl logs .config* key-build* DEVICE_NAME
        df -hT
