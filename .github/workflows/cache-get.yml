name: cache-get

on:
 # repository_dispatch:
  workflow_dispatch:
    inputs:
      FEEDS_CONF:
        description: 'Feeds [必选]'
        default: 'feeds.conf.default.ufi'
      CONFIG_FILE:
        description: '调用的 [.config] 文件名称'
        default: 'mf601'
      DEFAULT_SOURCE:
        description: '源码:分支 [必选]'
        default: 'lkiuyu/openwrt-ufi:main'
  #schedule:
  #- cron: 15 10 */1  * *

env:
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    #runs-on: ubuntu-latest


    steps:
    - name: Checkout
      uses: actions/checkout@main


    - name: 环境变量设置
      run: |
        FEEDS_CONF=${{ github.event.inputs.FEEDS_CONF }}
        CONFIG_FILE=${{ github.event.inputs.CONFIG_FILE }}
        DEFAULT_SOURCE=${{ github.event.inputs.DEFAULT_SOURCE }}    
        export REPO_URL="https://github.com/$(echo $DEFAULT_SOURCE | cut -d \: -f 1)"
        export REPO_BRANCH=$(echo $DEFAULT_SOURCE | cut -d \: -f 2)
        [ -z $REPO_BRANCH ] && REPO_BRANCH=master
        echo "FEEDS_CONF=$FEEDS_CONF" >> $GITHUB_ENV
        echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        echo "DEFAULT_SOURCE=$DEFAULT_SOURCE" >> $GITHUB_ENV
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV

    - name: 安装依赖
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL /etc/mysql /etc/php
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo apt install -y build-essential ecj fastjar file flex g++ gcc-multilib g++-multilib gawk gettext git git-core java-propose-classpath libelf-dev libncurses5-dev libncursesw5-dev libssl-dev swig python3 python3-distutils subversion unzip wget zlib1g-dev rsync qemu-utils mkbootimg img2simg
        sudo apt-get install -y build-essential gcc g++ vim make cmake unzip python3-dev vim git perl wget patchelf gawk libncurses5-dev subversion zlib1g-dev m4
        sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq install ack img2simg mkbootimg antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev mkbootimg img2simg
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "Compile_Date=$(date +%Y%m%d%H%M)" > $GITHUB_WORKSPACE/Openwrt.info
        echo "Display_Date=$(date +%Y/%m/%d)" >> $GITHUB_WORKSPACE/Openwrt.info
        echo "Openwrt_Repository=$REPO_URL" >> $GITHUB_WORKSPACE/Openwrt.info
        ls && df -h

    - name: 释放磁盘空间
      uses: jlumbroso/free-disk-space@main
      with:
      # this might remove tools that are actually needed,
      # if set to "true" but frees about 6 GB
       tool-cache: true
      # all of these default to true, but feel free to set to
      # "false" if necessary for your workflow
       android: true
       dotnet: true
       haskell: true
       large-packages: true
       swap-storage: true

    - name: 缓存编译
      id: cachebuild
      uses: actions/cache@v4
      #env:
        #cache-name: cache-openwrt-lede
      with:
        path: /workdir/openwrt
        key: ${{env.DEFAULT_SOURCE}}-${{env.CONFIG_FILE}}
        restore-keys: ${{env.CONFIG_FILE}}
        
        
    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        #git clone -b $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        ls -alh
        cd ./openwrt
        git pull
        rm -rf /workdir/openwrt/feeds.conf.default

    - name: 更新 feeds
      run: |
        cp -f $FEEDS_CONF openwrt/feeds.conf.default
        ./openwrt/scripts/feeds update -a
        chmod +x $DIY_P1_SH
        $GITHUB_WORKSPACE/$DIY_P1_SH

 
    - name: 安装 feeds
      run: |
        cd openwrt 
        df -h && ls
        ./scripts/feeds install -a
        free -h
        cp -f $GITHUB_WORKSPACE/extra/Makefile package/feeds/telephony/freeswitch/Makefile
        cp -f $GITHUB_WORKSPACE/extra/mac80211.sh package/network/config/wifi-scripts/files/lib/wifi/mac80211.sh


    - name: 加载自定义 configuration
      run: |
        cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        #$GITHUB_WORKSPACE/$DIY_P2_SH
        echo -e "*********$(nproc) 线程服务器*****" && cat /proc/cpuinfo
        df -hT && ls && free -m && ls openwrt

    - name: 下载文件
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j4
        #find dl -size -1024c -exec ls -l {} \;
        #find dl -size -1024c -exec rm -f {} \;


    - name: 编译固件
      id: compile
      run: |
        cd openwrt && ls
        #make tools/compile -j$(nproc) 
        #make toolchain/compile -j$(nproc) 
        #make -j$(nproc) 
        make target/compile -j4
        make package/compile -j4
        make package/index
        make package/install -j4 V=s
        make target/install -j4
        make json_overview_image_info
        make checksum
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d-%H.%M")" >> $GITHUB_ENV
        #编译设备名，编译完成时间

    - name: 检查磁盘空间
      #if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
       df -hT
       cp $GITHUB_WORKSPACE/Openwrt.info ./openwrt/bin/Openwrt.info
       cd openwrt/bin/targets/*/*/ && ls
       echo "VERSION_INFO=$(cat *.manifest |grep -o "kernel.*")" >> $GITHUB_ENV

      
      
    - name: 上传 bin
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 清除多余文件
      if: steps.compile.outputs.status == 'success' && !cancelled()
      working-directory: /workdir
      run: |
        cd openwrt/bin/targets/*/*/ && ls
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: 发布固件到 Release
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      uses: ncipollo/release-action@v1.12.0
      with:
        name: openwrt for ${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        allowUpdates: true
        replacesArtifacts: true
        tag: ${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE }}/*.*
        body: |
          * 这是 ${{ env.DEVICE_NAME }} 使用的 OpenWrt 固件
          * 默认 IP：192.168.5.1 默认密码：password
          * 当前使用版本:【源码( ${{ env.REPO_URL }}:${{ env.REPO_BRANCH }} )】
          * ${{ env.VERSION_INFO }}
          
