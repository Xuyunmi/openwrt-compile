name: cache-make

on:
 # repository_dispatch:
  workflow_dispatch:
    inputs:
      FEEDS_CONF:
        description: 'Feeds [必选]'
        default: 'feeds.conf.default'
      CONFIG_FILE:
        description: '调用的 [.config] 文件名称'
        default: 'r3g'
      DEFAULT_SOURCE:
        description: '源码:分支 [必选]'
        default: 'coolsnowwolf/lede:master'
  #schedule:
  #- cron: 15 */8 * * *

env:
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    #runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main


    - name: 环境变量设置
      run: |
        FEEDS_CONF=${{ github.event.inputs.FEEDS_CONF }}
        CONFIG_FILE=${{ github.event.inputs.CONFIG_FILE }}
        DEFAULT_SOURCE=${{ github.event.inputs.DEFAULT_SOURCE }}    
        export REPO_URL="https://github.com/$(echo $DEFAULT_SOURCE | cut -d \: -f 1)"
        export REPO_BRANCH=$(echo $DEFAULT_SOURCE | cut -d \: -f 2)
        [ -z $REPO_BRANCH ] && REPO_BRANCH=master
        echo "FEEDS_CONF=$FEEDS_CONF" >> $GITHUB_ENV
        echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        echo "DEFAULT_SOURCE=$DEFAULT_SOURCE" >> $GITHUB_ENV
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV

    - name: 安装依赖
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL /etc/mysql /etc/php
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 img2simg mkbootimg asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev mkbootimg img2simg
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "Compile_Date=$(date +%Y%m%d%H%M)" > $GITHUB_WORKSPACE/Openwrt.info
        echo "Display_Date=$(date +%Y/%m/%d)" >> $GITHUB_WORKSPACE/Openwrt.info
        echo "Openwrt_Repository=$REPO_URL" >> $GITHUB_WORKSPACE/Openwrt.info
        ls -alh

    - name: 缓存编译
      id: cachebuild
      uses: actions/cache@v3
      #env:
        #cache-name: cache-openwrt-lede
      with:
        path: /workdir/openwrt
        key: ${{env.DEFAULT_SOURCE}}-${{env.CONFIG_FILE}}
        restore-keys: ${{env.CONFIG_FILE}}
        
        
    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        ls -alh
        rm -rf /workdir/openwrt/feeds.conf.default
        ls -lah ./openwrt
        #git pull

    - name: 更新 feeds
      run: |
        cp -f $FEEDS_CONF openwrt/feeds.conf.default
        ./openwrt/scripts/feeds update -a
        chmod +x $DIY_P1_SH
        #$GITHUB_WORKSPACE/$DIY_P1_SH

 
    - name: 安装 feeds
      run: |
        cd openwrt 
        df -h && ls -alh
        ./scripts/feeds install -a
        free -h


    - name: 加载自定义 configuration
      run: |
        cp -f $GITHUB_WORKSPACE/Configs/$CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        #$GITHUB_WORKSPACE/$DIY_P2_SH
        echo -e "*********$(nproc) 线程服务器*****" && cat /proc/cpuinfo
        df -hT && ls -alh && free -h && ls -alh openwrt

    - name: 下载文件
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j4
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;


    - name: 编译固件
      id: compile
      run: |
        cd openwrt && ls
        make tools/compile -j4
        make toolchain/compile -j4
        #make -j$(nproc) 
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d-%H.%M")" >> $GITHUB_ENV
        #编译设备名，编译完成时间



    - name: 清除多余文件
      if: steps.compile.outputs.status == 'success' && !cancelled()
      working-directory: /workdir
      run: |
        cd openwrt
        make clean
        ./scripts/feeds clean
        rm -rf bin build_dir tmp dl logs .config* key-build* DEVICE_NAME
        df -hT
